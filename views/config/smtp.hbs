<div class="d-sm-flex align-items-center justify-content-between mb-1">
    <h1 class="h3 mb-0 text-gray-800">

        <small><i class="fas fa-server fa-fw"></i></small>
        SMTP Interface
        <span class="badge badge-{{serverState.label.type}} state-info" data-type="smtp">
            {{#if serverState.label.spinner}}
            <i class="fas fa-spinner fa-spin fa-fw"></i>
            {{/if}}

            {{serverState.label.name}}</span>
    </h1>
</div>

<p>Send emails through EmailEngine using SMTP protocol. While the <a
        href="/admin/swagger#/Submit/postV1AccountAccountSubmit" target="_blank" referrerpolicy="no-referrer">submission
        API</a> is recommended for modern applications, the SMTP
    interface supports legacy systems that require traditional email sending.</p>
<p class="mb-4">Configure your SMTP server settings below.</p>

<form method="post" action="/admin/config/smtp">
    <input type="hidden" name="crumb" id="crumb" value="{{crumb}}" />

    <div class="card mt-4">
        <div class="card-header py-3">
            <h6 class="m-0 font-weight-bold text-primary">Server Configuration</h6>
        </div>

        <ul class="list-group list-group-flush mb-3">
            <li class="list-group-item d-flex justify-content-between align-items-top">

                <div class="form-group form-check mb-0">


                    <input type="checkbox" class="form-check-input {{#if errors.smtpServerEnabled}}is-invalid{{/if}}"
                        id="smtpServerEnabled" name="smtpServerEnabled" {{#if
                        values.smtpServerEnabled}}checked{{/if}} />
                    <label class="form-check-label" for="smtpServerEnabled">Enable SMTP Server</label>
                    {{#if errors.smtpServerEnabled}}
                    <span class="invalid-feedback">{{errors.smtpServerEnabled}}</span>
                    {{/if}}
                    <small class="form-text text-muted">Start the SMTP server to accept email submissions.</small>
                </div>

                <div class="text-right">
                    <div class="text-muted code-link">[<a href="/admin/swagger#/Settings/postV1Settings" target="_blank"
                            rel="noopener noreferrer">smtpServerEnabled</a>]</div>

                </div>
            </li>
        </ul>

        <div class="card-body">


            <div class="form-group">
                <div class="text-muted float-right code-link">[<a href="/admin/swagger#/Settings/postV1Settings"
                        target="_blank" rel="noopener noreferrer">smtpServerPort</a>]
                </div>

                <label for="smtpServerPort">Port</label>

                <input type="number"
                    class="form-control trigger-example-render {{#if errors.smtpServerPort}}is-invalid{{/if}}"
                    id="smtpServerPort" name="smtpServerPort" value="{{values.smtpServerPort}}" />

                {{#if errors.smtpServerPort}}
                <span class="invalid-feedback">{{errors.smtpServerPort}}</span>
                {{/if}}
                <small class="form-text text-muted">TCP port for SMTP connections. Ports below 1024 may require elevated
                    privileges.</small>
            </div>

            <div class="form-group">
                <div class="text-muted float-right code-link">[<a href="/admin/swagger#/Settings/postV1Settings"
                        target="_blank" rel="noopener noreferrer">smtpServerHost</a>]
                </div>

                <label for="smtpServerHost">Listen Address</label>

                <input type="text"
                    class="form-control basicAutoComplete trigger-example-render {{#if errors.smtpServerHost}}is-invalid{{/if}}"
                    id="smtpServerHost" name="smtpServerHost" value="{{values.smtpServerHost}}" data-lpignore="true"
                    autocomplete="off" />

                {{#if errors.smtpServerHost}}
                <span class="invalid-feedback">{{errors.smtpServerHost}}</span>
                {{/if}}
                <small class="form-text text-muted">IP address to bind to. Use "0.0.0.0" or leave empty to accept
                    connections from anywhere.</small>
            </div>

            <div class="form-group form-check">
                <div class="text-muted float-right code-link">[<a href="/admin/swagger#/Settings/postV1Settings"
                        target="_blank" rel="noopener noreferrer">smtpServerProxy</a>]
                </div>

                <input type="checkbox" class="form-check-input {{#if errors.smtpServerProxy}}is-invalid{{/if}}"
                    id="smtpServerProxy" name="smtpServerProxy" {{#if values.smtpServerProxy}}checked{{/if}} />
                <label class="form-check-label" for="smtpServerProxy">Enable PROXY Protocol</label>
                {{#if errors.smtpServerProxy}}
                <span class="invalid-feedback">{{errors.smtpServerProxy}}</span>
                {{/if}}
                <small class="form-text text-muted">Required when using HAProxy with <code>send-proxy</code>.</small>
            </div>
        </div>
    </div>

    <div class="card mt-4">
        <div class="card-header py-3">
            <h6 class="m-0 font-weight-bold text-primary">Authentication</h6>
        </div>
        <div class="card-body">
            <div class="form-group form-check">
                <div class="text-muted float-right code-link">[<a href="/admin/swagger#/Settings/postV1Settings"
                        target="_blank" rel="noopener noreferrer">smtpServerAuthEnabled</a>]
                </div>

                <input type="checkbox"
                    class="form-check-input trigger-example-render {{#if errors.smtpServerAuthEnabled}}is-invalid{{/if}}"
                    id="smtpServerAuthEnabled" name="smtpServerAuthEnabled" {{#if
                    values.smtpServerAuthEnabled}}checked{{/if}} />
                <label class="form-check-label" for="smtpServerAuthEnabled">Require Authentication</label>
                {{#if errors.smtpServerAuthEnabled}}
                <span class="invalid-feedback">{{errors.smtpServerAuthEnabled}}</span>
                {{/if}}
            </div>

            <div class="form-group">
                <div class="text-muted float-right code-link">[<a href="/admin/swagger#/Settings/postV1Settings"
                        target="_blank" rel="noopener noreferrer">smtpServerPassword</a>]
                </div>

                <label for="smtpServerPassword">Global Password</label>
                <div class="input-group">
                    <input type="password"
                        class="form-control trigger-example-render {{#if errors.smtpServerPassword}}is-invalid{{/if}}"
                        id="smtpServerPassword" name="smtpServerPassword" value="{{values.smtpServerPassword}}"
                        {{#unless values.smtpServerPassword}}placeholder="No global password set" {{/unless}}
                        data-lpignore="true" autocomplete="off" />

                    <div class="input-group-append">
                        <button class="btn btn-outline-primary" type="button" id="showPassword"><i
                                class="fas fa-eye"></i></button>
                    </div>
                </div>

                {{#if errors.smtpServerPassword}}
                <span class="invalid-feedback">{{errors.smtpServerPassword}}</span>
                {{/if}}
                <small class="form-text text-muted">Optional shared password for all accounts. Leave empty to use only
                    access tokens.</small>
            </div>
        </div>

        <div class="card-footer">
            <small class="text-muted">
                <i class="fas fa-info-circle text-gray-300"></i>

                <strong>How to authenticate:</strong> Use account IDs as usernames. For passwords, use either the global
                password above or <a href="/admin/tokens">access tokens</a> with SMTP scope.
            </small>
        </div>

    </div>

    <div class="card mt-4">
        <div class="card-header py-3">
            <h6 class="m-0 font-weight-bold text-primary">Security (TLS)</h6>
        </div>
        <div class="card-body">
            <div class="form-group form-check">
                <div class="text-muted float-right code-link">[<a href="/admin/swagger#/Settings/postV1Settings"
                        target="_blank" rel="noopener noreferrer">smtpServerTLSEnabled</a>]
                </div>

                <input type="checkbox"
                    class="form-check-input trigger-example-render {{#if errors.smtpServerTLSEnabled}}is-invalid{{/if}}"
                    id="smtpServerTLSEnabled" {{#if certificateData}}data-certificate="{{certificateData.fingerprint}}"
                    {{/if}} data-domain="{{serviceDomain}}" name="smtpServerTLSEnabled" {{#if
                    values.smtpServerTLSEnabled}}checked{{/if}} />

                <label class="form-check-label" for="smtpServerTLSEnabled">Enable TLS Encryption

                    {{#if certificateData.label}}
                    <span id="tls-label" class="badge badge-{{certificateData.label.type}}"
                        data-labeltype="{{certificateData.label.type}}" style="cursor: default;" data-toggle="tooltip"
                        data-placement="top"
                        title="{{certificateData.label.title}}">{{certificateData.label.text}}</span>
                    {{/if}}

                </label>

                {{#if errors.smtpServerTLSEnabled}}
                <span class="invalid-feedback">{{errors.smtpServerTLSEnabled}}</span>
                {{/if}}

                <small class="form-text text-muted">
                    {{#if serviceDomain}}

                    Certificates will be provisioned for <em>{{serviceDomain}}</em>. Change the domain in <a
                        href="/admin/config/service#settingsServiceUrl">Service URL settings</a>.

                    {{else}}

                    Set a domain name in <a href="/admin/config/service#settingsServiceUrl">Service URL settings</a> to
                    enable automatic TLS certificates.

                    {{/if}}

                </small>
            </div>

        </div>

        {{#if serviceDomain}}
        <div class="card-footer">
            <small class="text-muted">
                <i class="fas fa-info-circle text-gray-300"></i>
                EmailEngine must be publicly accessible at <em><a href="{{serviceUrl}}" target="_blank"
                        rel="noopener noreferrer">{{serviceUrl}}</a></em> for automatic certificates. Otherwise, a
                self-signed certificate will be used.
            </small>
        </div>
        {{/if}}

    </div>

    <div class="card mt-4 mb-4">
        <a href="#showHelp" class="d-block card-header py-3 collapsed" data-toggle="collapse" role="button"
            aria-expanded="true" aria-controls="showHelp">
            <h6 class="m-0 font-weight-bold text-primary">Integration Examples</h6>
        </a>
        <div class="collapse" id="showHelp">
            <div class="card-body">
                <p><strong>With authentication enabled:</strong> Use the account ID as username and password for SMTP
                    login.</p>

                <p><strong>With authentication disabled:</strong> Include the <code>X-EE-Account</code> header with the
                    account ID in your messages.</p>

                <ul class="nav nav-tabs mb-3" id="code-examples" role="tablist">
                    <li class="nav-item" role="presentation">
                        <a class="nav-link active" id="example-nodemailer-tab" data-toggle="tab"
                            href="#example-nodemailer" role="tab" aria-controls="example-nodemailer"
                            aria-selected="true">Node.js (Nodemailer)</a>
                    </li>
                    <li class="nav-item" role="presentation">
                        <a class="nav-link" id="example-phpmailer-tab" data-toggle="tab" href="#example-phpmailer"
                            role="tab" aria-controls="example-phpmailer" aria-selected="false">PHP (PHPMailer)</a>
                    </li>
                </ul>

                <!-- Tab panes -->
                <div class="tab-content">
                    <div class="tab-pane active" id="example-nodemailer" role="tabpanel"
                        aria-labelledby="example-nodemailer-tab">

                        <pre><code id="example-nodemailer-code"></code></pre>

                    </div>

                    <div class="tab-pane" id="example-phpmailer" role="tabpanel"
                        aria-labelledby="example-phpmailer-tab">

                        <pre><code id="example-phpmailer-code"></code></pre>

                    </div>
                </div>

                <div>
                    <div class="form-group form-check">
                        <input type="checkbox" class="form-check-input trigger-example-render"
                            id="exampleShowPassword" />
                        <label class="form-check-label" for="exampleShowPassword">Show password in examples</label>
                    </div>
                </div>

            </div>
        </div>
    </div>

    <div class="mb-4 mt-4">
        <button type="submit" class="btn btn-primary btn-icon-split">
            <span class="icon text-white-50">
                <i class="fas fa-cog"></i>
            </span>
            <span class="text">Save Changes</span>
        </button>
    </div>

</form>

<div class="modal fade" id="tlsModal" tabindex="-1" aria-labelledby="tlsModalLabel" aria-hidden="true">
    <div class="modal-dialog  modal-lg">
        <div class="modal-content">
            <div class="modal-header">

                <h5 class="modal-title modal-show-default" id="tlsModalLabel">Provisioning Certificate <i
                        class="fas fa-spinner fa-spin fa-fw modal-show-default"></i></h5>
                <h5 class="modal-title modal-show-error">Certificate Request Failed</h5>

                <button type="button" class="close modal-show-error d-none" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body modal-show-default">
                Setting up TLS certificate for <em class="show-service-domain">{{serviceDomain}}</em>. This may take a
                moment...
            </div>
            <div class="modal-body modal-show-error d-none">
                <p>Unable to provision certificate:</p>

                <div class="text-monospace error-content alert alert-danger"></div>
            </div>

            <div class="modal-footer modal-show-error d-none">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<input type="hidden" id="availableAddresses" value="{{availableAddresses}}">

<script>
    document.addEventListener('DOMContentLoaded', () => {

        let showBt = document.getElementById('showPassword');
        let serviceSecretElm = document.getElementById('smtpServerPassword');

        let showSecret = () => {
            let current = serviceSecretElm.getAttribute('type')
            serviceSecretElm.setAttribute('type', current === 'text' ? 'password' : 'text');
            showBt.blur()
        }

        showBt.addEventListener('click', showSecret);

        let availableAddresses = document.getElementById('availableAddresses').value.split(',').map(e => e.trim()).filter(e => e);
        $('.basicAutoComplete').autoComplete({
            resolver: 'custom',
            events: {
                search: function (query, callback) {
                    callback(availableAddresses.filter(a => a.indexOf(query) >= 0))
                }
            },
            preventEnter: true,
            minLength: 1
        });


        let codeTemplates = {
            nodemailer: {
                lang: 'javascript',
                codeAuth: `const transporter = nodemailer.createTransport({
    host: 'HOST',
    port: PORT,
    secure: NODEMAILER_TLS,
    auth: {
        user: 'USERNAME',
        pass: 'PASSWORD'
    }
}});`,
                codeNoAuth: `const transporter = nodemailer.createTransport({
    host: 'HOST',
    port: PORT,
    secure: NODEMAILER_TLS,
    auth: false
}}, {
    // default message fields
    headers: {
        // provide sending account id via this header
        'X-EE-Account': 'USERNAME'
    }
});`},

            phpmailer: {
                lang: 'php',
                codeAuth: `$mail = new PHPMailer(true);
$mail->isSMTP();
$mail->Host = 'HOST';
$mail->SMTPAuth = true;
$mail->Username = 'USERNAME';
$mail->Password = 'PASSWORD';
$mail->SMTPSecure = 'PHPMAILER_TLS';
$mail->Port = PORT;`,
                codeNoAuth: `$mail = new PHPMailer(true);
$mail->isSMTP();
$mail->Host = 'HOST';
$mail->SMTPAuth = false;
$mail->SMTPSecure = 'PHPMAILER_TLS';
$mail->Port = PORT;

// provide sending account id via this header
$mail->addCustomHeader('X-EE-Account', 'USERNAME');
`}
        };

        let renderTemplate = (templateKey) => {
            let template = codeTemplates[templateKey][document.getElementById('smtpServerAuthEnabled').checked ? 'codeAuth' : 'codeNoAuth'];

            template = `// Replace "USERNAME" with the account id of a registered user you want to send mail as
// Replace "HOST" with the hostname or IP address of the SMTP interface
// NB! Make sure that firewall settings allow accessing the SMTP interface

` + template;

            let password = !document.getElementById('smtpServerPassword').value ? '<smtp-access-token>' : (document.getElementById('exampleShowPassword').checked ? document.getElementById('smtpServerPassword').value : '******')

            let code = template.
                replace(/HOST/g, window.location.hostname).
                replace(/PORT/g, Number(document.getElementById('smtpServerPort').value) || 0).
                replace(/NODEMAILER_TLS/g, document.getElementById('smtpServerTLSEnabled').checked ? 'true' : 'false').
                replace(/PHPMAILER_TLS/g, document.getElementById('smtpServerTLSEnabled').checked ? 'tls' : '').
                replace(/USERNAME/g, 'account_id').
                replace(/PASSWORD/g, password);

            return hljs.highlight(code, { language: codeTemplates[templateKey].lang }).value;
        }

        let renderExamples = () => {
            document.getElementById('example-nodemailer-code').innerHTML = renderTemplate('nodemailer');
            document.getElementById('example-phpmailer-code').innerHTML = renderTemplate('phpmailer');

            document.getElementById('exampleShowPassword').disabled = !document.getElementById('smtpServerAuthEnabled').checked || !document.getElementById('smtpServerPassword').value;
        }

        for (let elm of document.querySelectorAll('.trigger-example-render')) {
            elm.addEventListener('change', renderExamples);
        }

        renderExamples();

        function paintCertData(certData) {
            let tlsLabelElm = document.getElementById('tls-label');

            if (!certData || !certData.label || !tlsLabelElm) {
                return
            }

            tlsLabelElm.classList.remove(`badge-${tlsLabelElm.dataset.labeltype}`);
            tlsLabelElm.classList.add(`badge-${certData.label.type}`);
            tlsLabelElm.dataset.labeltype = certData.label.type

            tlsLabelElm.title = certData.label.title;
            tlsLabelElm.textContent = certData.label.text;

            $(tlsLabelElm).tooltip('dispose');
            $(tlsLabelElm).tooltip('enable');
        }

        let loadingCertData = false;
        let loadedCertData = false;

        function loadCertData() {
            loadingCertData = true;

            for (let elm of document.querySelectorAll('#tlsModal .modal-show-error')) {
                elm.classList.add('d-none')
            }

            for (let elm of document.querySelectorAll('#tlsModal .modal-show-default')) {
                elm.classList.remove('d-none')
            }

            $('#tlsModal').modal('show');

            $('#tlsModal').on('shown.bs.modal', function () {
                fetch('/admin/config/smtp/certificate', {
                    method: 'post',
                    headers: { 'content-type': 'application/json' },
                    body: JSON.stringify({
                        crumb: document.getElementById('crumb').value
                    })
                }).then(res => {
                    if (!res.ok) {
                        throw new Error(`HTTP error! status: ${res.status}`);
                    }
                    return res.json()
                }).then(data => {
                    if (!data || !data.success) {
                        throw new Error(data && data.error || 'Request failed')
                    }
                    console.log(data)
                    $('#tlsModal').modal('hide');
                    loadingCertData = false;
                    loadedCertData = true;
                    document.getElementById('smtpServerTLSEnabled').dataset.certificate = data.fingerprint

                    paintCertData(data);
                }).catch(err => {
                    console.error(err)
                    loadingCertData = false;

                    document.getElementById('smtpServerTLSEnabled').checked = false;
                    renderExamples();

                    for (let elm of document.querySelectorAll('#tlsModal .modal-show-error')) {
                        elm.classList.remove('d-none')
                    }

                    for (let elm of document.querySelectorAll('#tlsModal .modal-show-default')) {
                        elm.classList.add('d-none')
                    }

                    document.querySelector('#tlsModal .error-content').textContent = err.message;
                });
            });
        }

        function checkLoadCerts() {
            if (document.getElementById('smtpServerTLSEnabled').checked &&
                !loadingCertData && !loadedCertData &&
                //!document.getElementById('smtpServerTLSEnabled').dataset.certificate &&
                document.getElementById('smtpServerTLSEnabled').dataset.domain) {

                loadCertData();
            }
        }

        document.getElementById('smtpServerTLSEnabled').addEventListener('click', checkLoadCerts);
        document.getElementById('smtpServerTLSEnabled').addEventListener('change', checkLoadCerts);
    });
</script>