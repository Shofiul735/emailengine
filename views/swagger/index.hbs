<div id="swagger-ui"></div>

<script src="/admin/swagger/resources/swagger-ui-bundle.js"></script>
<script src="/admin/swagger/resources/swagger-ui-standalone-preset.js"></script>
<script src="/admin/swagger/resources/extend.js" type="text/javascript"></script>
<script>
    function getUrlVars() {
        const vars = [];
        let hash;
        const hashes = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&');
        for (let i = 0; i < hashes.length; i++) {
            hash = hashes[i].split('=');
            vars.push(hash[0]);
            vars[hash[0]] = hash[1];
        }
        return vars;
    }

    document.addEventListener('DOMContentLoaded', function () {

        let url = window.location.search.match(/url=([^&]+)/);
        if (url && url.length > 1) {
            url = decodeURIComponent(url[1]);
        } else {
            url = "/swagger.json";
        }

        // pull validatorUrl string or null form server
        let validatorUrl = null;
        validatorUrl: '//online.swagger.io/validator';

        const ACCESS_TOKEN_QUERY_PARAM_NAME = 'access_token';
        const accessToken = getUrlVars()[ACCESS_TOKEN_QUERY_PARAM_NAME];

        fetch(url)
            .then(function (response) {
                return response.json()
            })
            .then(function (json) {

                if (json.openapi && json.openapi.startsWith('3.')) {
                    json.servers = [{
                        url: window.location.protocol + '//' + window.location.host,
                        description: 'Current server'
                    }];
                }

                const swaggerOptions = {

                    // url: url + (accessToken ? (url.indexOf('?') < 0 ? '?' : '&') + ACCESS_TOKEN_QUERY_PARAM_NAME + '=' + accessToken : ''),
                    spec: json,
                    validatorUrl: validatorUrl,
                    dom_id: '#swagger-ui',
                    deepLinking: true,
                    presets: [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset],
                    plugins: [SwaggerUIBundle.plugins.DownloadUrl],
                    layout: 'StandaloneLayout',
                    docExpansion: "list",
                    tagsSorter: apisSorter.unsorted,
                    operationsSorter: operationsSorter.method,

                    // patch: uiCompleteScript -- Rendering
                    onComplete: function () {

                    },
                    tryItOutEnabled: true,
                    defaultModelsExpandDepth: 0,
                    defaultModelExpandDepth: -1
                }

                const ui = SwaggerUIBundle(swaggerOptions);

                window.ui = ui;
            });
    });
</script>